services:
  postgres:
    image: postgres:14-alpine
    container_name: strapi-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: strapi
      POSTGRES_PASSWORD: strapi123
      POSTGRES_DB: strapi
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - strapi-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U strapi"]
      interval: 10s
      timeout: 5s
      retries: 5

  strapi:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: strapi-app
    restart: unless-stopped
    environment:
      # Database
      DATABASE_CLIENT: postgres
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: strapi
      DATABASE_USERNAME: strapi
      DATABASE_PASSWORD: strapi123
      DATABASE_SSL: false
      # Server
      HOST: 0.0.0.0
      PORT: 1337
      # Secrets from .env file
      APP_KEYS: ${APP_KEYS}
      API_TOKEN_SALT: ${API_TOKEN_SALT}
      ADMIN_JWT_SECRET: ${ADMIN_JWT_SECRET}
      TRANSFER_TOKEN_SALT: ${TRANSFER_TOKEN_SALT}
      JWT_SECRET: ${JWT_SECRET}
      # Environment
      NODE_ENV: production
    volumes:
      - ./public/uploads:/opt/app/public/uploads
      - strapi-data:/opt/app/.tmp
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - strapi-network
    ports:
      - "1337:1337"

  nginx:
    image: nginx:alpine
    container_name: strapi-nginx
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - strapi
    networks:
      - strapi-network

volumes:
  postgres-data:
  strapi-data:

networks:
  strapi-network:
    driver: bridge
